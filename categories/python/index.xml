<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on Mingxuan Yang</title>
    <link>https://Mingxuan-Yang.github.io/categories/python/</link>
    <description>Recent content in Python on Mingxuan Yang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en</language>
    <lastBuildDate>Fri, 20 Nov 2020 00:00:00 +0000</lastBuildDate><atom:link href="https://Mingxuan-Yang.github.io/categories/python/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>COVID-19 Analysis</title>
      <link>https://Mingxuan-Yang.github.io/posts/covid_19/</link>
      <pubDate>Fri, 20 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Mingxuan-Yang.github.io/posts/covid_19/</guid>
      <description>Introduction Coronavirus disease 2019 (COVID-19) is a contagious respiratory and vascular disease. Since its outbreak in December 2019 from Wuhan, China, it has presented the world with many political, scientific and public health challenges. Some researchers identified some important nutritional considerations for the prevention and management of COVID-19 diseases, including the role of select micronutri- ents (vitamins and minerals), phytochemicals and probiotics in conferring protection against both viral infection and pathogenicity.</description>
    </item>
    
    <item>
      <title>Insect Image Classification Using CNN</title>
      <link>https://Mingxuan-Yang.github.io/posts/insect_classification/</link>
      <pubDate>Fri, 13 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Mingxuan-Yang.github.io/posts/insect_classification/</guid>
      <description>Introduction This blog is to understand the Python implementation of Convolutional Neural Network (CNN) through the insect classification example. CNN is one of the most widely-used deep learning methods in the field of image and video recognition, recommender systems, image classification, natural language processing etc. In this blog, we are going to apply CNN via tensorflow library in Python to classify insect images from beetle, cockroache and dragonflie categories. The dataset applied in this post can be obtained here.</description>
    </item>
    
    <item>
      <title>Dashboard for Doctorate Recipients in the United States</title>
      <link>https://Mingxuan-Yang.github.io/posts/phd_dashboard/</link>
      <pubDate>Fri, 06 Nov 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Mingxuan-Yang.github.io/posts/phd_dashboard/</guid>
      <description>Introduction A doctorate is an advanced academic degree awarded by universities that demonstrates the recipient&amp;rsquo;s mastery in a certain field of study. From the perspective of institutions, the number of doctorate recipients, to some extent, can be viewed an indicator to measure its research ability. From the aspect of researchers, a doctor&amp;rsquo;s degree, though can take years and even educational debt to pursue, can qualify him/her to teach in a university in most countries.</description>
    </item>
    
    <item>
      <title>Data Extraction Using Star Wars API</title>
      <link>https://Mingxuan-Yang.github.io/posts/star_wars/</link>
      <pubDate>Sat, 17 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Mingxuan-Yang.github.io/posts/star_wars/</guid>
      <description>Introduction This blog is to extract data through SWAPI, the Star Wars API, in the Python environment. The details of SWAPI can be obtained at its documentation. API is the abbreviation for Application Programming Interface, which enables data transmission between multiple software intermediaries. Using this tool, information can be accessed through different data formats. SWAPI provides six attributes about Star Wars. They are
 films people planets species starships vehicles  These data can be rendered by two types of encodings in SWAPI, which are</description>
    </item>
    
    <item>
      <title>Creating a SQLite3 Schema Using Spotify Dataset</title>
      <link>https://Mingxuan-Yang.github.io/posts/spotify-songs/</link>
      <pubDate>Wed, 07 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Mingxuan-Yang.github.io/posts/spotify-songs/</guid>
      <description>Introduction This blog is to create a SQLite3 schema to store Spotify Songs Dataset. This schema should follow the normalization rule to reduce data redundancy and prevent inconsistencies on insertion, update and deletion. Normalization design technique divides large tables into smaller pieces and uses some relationships to connect them. There are many database normal forms, they can be listed from least normalized to most normalized as below:
 UNF: Unnormalized form 1NF: First normal form 2NF: Second normal form 3NF: Third normal form EKNF: Elementary key normal form BCNF: Boyce-Codd normal form 4NF: Fourth normal form ETNF: Essential tuple normal form 5NF: Fifth normal form DKNF: Domain-key normal form 6NF: Sixth normal form  The main normal forms applied in this blog are 1NF, 2NF and 3NF.</description>
    </item>
    
    <item>
      <title>Malaria Visualization</title>
      <link>https://Mingxuan-Yang.github.io/posts/malaria-visualization/</link>
      <pubDate>Thu, 01 Oct 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Mingxuan-Yang.github.io/posts/malaria-visualization/</guid>
      <description>Malaria is a fatal disease caused by infected mosquitoes. It has remained with human in a long history and is one of the biggest causes of death. Almost half of the world’s population, according to the World Health Organization (WHO), is at the risk of catching Malaria. To gain more comprehension about this powerful enemy, the Wellcome Trust and Sage Bionetworks have hosted a Data Challenge based on the relevant Malaria datasets.</description>
    </item>
    
    <item>
      <title>Euler Project Problem 85 using Python</title>
      <link>https://Mingxuan-Yang.github.io/posts/euler-project-problem-85/</link>
      <pubDate>Wed, 09 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Mingxuan-Yang.github.io/posts/euler-project-problem-85/</guid>
      <description>Problem Problem 85: Counting rectangles
By counting carefully it can be seen that a rectangular grid measuring 3 by 2 contains eighteen rectangles:
Although there exists no rectangular grid that contains exactly two million rectangles, find the area of the grid with the nearest solution.
Analysis First of all, we need to specify the number of possible rectangles when the width and length of the grid are x units and y units.</description>
    </item>
    
    <item>
      <title>Euler Project Problem 31 using Python</title>
      <link>https://Mingxuan-Yang.github.io/posts/euler-project-problem-31/</link>
      <pubDate>Tue, 08 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Mingxuan-Yang.github.io/posts/euler-project-problem-31/</guid>
      <description>Problem Problem 31: Coin sums
In the United Kingdom the currency is made up of pound (£) and pence (p). There are eight coins in general circulation: 1p, 2p, 5p, 10p, 20p, 50p, £1 (100p), and £2 (200p). It is possible to make £2 in the following way:
1×£1 + 1×50p + 2×20p + 1×5p + 1×2p + 3×1p
How many different ways can £2 be made using any number of coins?</description>
    </item>
    
    <item>
      <title>Euler Project Problem 25 using Python</title>
      <link>https://Mingxuan-Yang.github.io/posts/euler-project-problem-25/</link>
      <pubDate>Mon, 07 Sep 2020 00:00:00 +0000</pubDate>
      
      <guid>https://Mingxuan-Yang.github.io/posts/euler-project-problem-25/</guid>
      <description>Problem Problem 25: 1000-digit Fibonacci number
The Fibonacci sequence is defined by the recurrence relation:
F(n) = F(n-1) + F(n-2), where F(1) = 1 and F(2) = 1.
Hence the first 12 terms will be:
F(1) = 1
F(2) = 1
F(3) = 2
F(4) = 3
F(5) = 5
F(6) = 8
F(7) = 13
F(8) = 21
F(9) = 34
F(10) = 55
F(11) = 89
F(12) = 144</description>
    </item>
    
  </channel>
</rss>
